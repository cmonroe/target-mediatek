From d735117cc5b30d51f60e5f5ab03274a7a58c0b73 Mon Sep 17 00:00:00 2001
From: Tim Hayes <tim.hayes@smartrg.com>
Date: Wed, 17 Nov 2021 10:01:06 -0800
Subject: [PATCH] OWRT-6281 added FIXED_PHY logic with 10 100 fixes

---
 drivers/net/phy/phylink.c | 157 +++++++++++++++++++++++++++++++++-----
 include/linux/phylink.h   |   1 +
 2 files changed, 139 insertions(+), 19 deletions(-)

diff --git a/drivers/net/phy/phylink.c b/drivers/net/phy/phylink.c
index 6072e87..37131c7 100644
--- a/drivers/net/phy/phylink.c
+++ b/drivers/net/phy/phylink.c
@@ -148,6 +148,7 @@ static const char *phylink_an_mode_str(unsigned int mode)
 		[MLO_AN_PHY] = "phy",
 		[MLO_AN_FIXED] = "fixed",
 		[MLO_AN_INBAND] = "inband",
+		[MLO_AN_FIXED_PHY] = "fixed_phy",
 	};
 
 	return mode < ARRAY_SIZE(modestr) ? modestr[mode] : "unknown";
@@ -177,6 +178,11 @@ static int phylink_parse_fixedlink(struct phylink *pl,
 		pl->link_config.speed = speed;
 		pl->link_config.duplex = DUPLEX_HALF;
 
+		if (fwnode_property_read_bool(fixed_node, "extphy")) {
+			pl->cfg_link_an_mode = MLO_AN_FIXED_PHY;
+		}
+
+
 		if (fwnode_property_read_bool(fixed_node, "full-duplex"))
 			pl->link_config.duplex = DUPLEX_FULL;
 
@@ -279,6 +285,13 @@ static int phylink_parse_mode(struct phylink *pl, struct fwnode_handle *fwnode)
 			return -EINVAL;
 		}
 
+		if (pl->cfg_link_an_mode == MLO_AN_FIXED_PHY) {
+			phylink_err(pl,
+				    "can't use both fixed-link and in-band-status\n");
+			return -EINVAL;
+		}
+
+
 		linkmode_zero(pl->supported);
 		phylink_set(pl->supported, MII);
 		phylink_set(pl->supported, Autoneg);
@@ -410,16 +423,39 @@ static void phylink_resolve_flow(struct phylink_link_state *state)
 static void phylink_mac_config(struct phylink *pl,
 			       const struct phylink_link_state *state)
 {
-	phylink_dbg(pl,
-		    "%s: mode=%s/%s/%s/%s adv=%*pb pause=%02x link=%u an=%u\n",
-		    __func__, phylink_an_mode_str(pl->cur_link_an_mode),
-		    phy_modes(state->interface),
-		    phy_speed_to_str(state->speed),
-		    phy_duplex_to_str(state->duplex),
-		    __ETHTOOL_LINK_MODE_MASK_NBITS, state->advertising,
-		    state->pause, state->link, state->an_enabled);
-
-	pl->mac_ops->mac_config(pl->config, pl->cur_link_an_mode, state);
+	if (pl->cfg_link_an_mode == MLO_AN_FIXED_PHY) {
+
+	       struct phylink_link_state fixed_state;
+		fixed_state.speed=pl->link_config.speed;
+		fixed_state.duplex=pl->link_config.duplex;
+		fixed_state.interface=pl->link_config.interface;
+		fixed_state.pause=pl->link_config.pause;
+		fixed_state.an_enabled=pl->link_config.an_enabled;
+		fixed_state.link=state->link;
+		linkmode_copy(fixed_state.advertising, pl->link_config.advertising);
+
+		phylink_info(pl,
+			    "FIXED_PHY %s: mode=%s/%s/%s/%s adv=%*pb pause=%02x link=%u an=%u\n",
+			    __func__, phylink_an_mode_str(pl->cur_link_an_mode),
+			    phy_modes(fixed_state.interface),
+			    phy_speed_to_str(fixed_state.speed),
+			    phy_duplex_to_str(fixed_state.duplex),
+			    __ETHTOOL_LINK_MODE_MASK_NBITS, fixed_state.advertising,
+			    fixed_state.pause, fixed_state.link, fixed_state.an_enabled);
+
+		pl->mac_ops->mac_config(pl->config, pl->cur_link_an_mode, &fixed_state);
+	} else {
+		phylink_dbg(pl,
+			    "%s: mode=%s/%s/%s/%s adv=%*pb pause=%02x link=%u an=%u\n",
+			    __func__, phylink_an_mode_str(pl->cur_link_an_mode),
+			    phy_modes(state->interface),
+			    phy_speed_to_str(state->speed),
+			    phy_duplex_to_str(state->duplex),
+			    __ETHTOOL_LINK_MODE_MASK_NBITS, state->advertising,
+			    state->pause, state->link, state->an_enabled);
+
+		pl->mac_ops->mac_config(pl->config, pl->cur_link_an_mode, state);
+	}
 }
 
 static void phylink_mac_pcs_an_restart(struct phylink *pl)
@@ -569,6 +605,10 @@ static void phylink_mac_initial_config(struct phylink *pl, bool force_restart)
 		phylink_get_fixed_state(pl, &link_state);
 		break;
 
+	case MLO_AN_FIXED_PHY:
+		phylink_get_fixed_state(pl, &link_state);
+		break;
+
 	case MLO_AN_INBAND:
 		link_state = pl->link_config;
 		if (link_state.interface == PHY_INTERFACE_MODE_SGMII)
@@ -606,16 +646,34 @@ static void phylink_link_up(struct phylink *pl,
 
 	pl->cur_interface = link_state.interface;
 
-	if (pl->pcs_ops && pl->pcs_ops->pcs_link_up)
-		pl->pcs_ops->pcs_link_up(pl->pcs, pl->cur_link_an_mode,
-					 pl->cur_interface,
-					 link_state.speed, link_state.duplex);
+	if (pl->cfg_link_an_mode == MLO_AN_FIXED_PHY) {
+
+		if (pl->pcs_ops && pl->pcs_ops->pcs_link_up)
+			pl->pcs_ops->pcs_link_up(pl->pcs, pl->cur_link_an_mode,
+						 pl->cur_interface,
+						 pl->link_config.speed, pl->link_config.duplex);
 
-	pl->mac_ops->mac_link_up(pl->config, pl->phydev,
-				 pl->cur_link_an_mode, pl->cur_interface,
-				 link_state.speed, link_state.duplex,
-				 !!(link_state.pause & MLO_PAUSE_TX),
-				 !!(link_state.pause & MLO_PAUSE_RX));
+		pl->mac_ops->mac_link_up(pl->config, pl->phydev,
+					 pl->cfg_link_an_mode, pl->cur_interface,
+					 pl->link_config.speed, pl->link_config.duplex,
+					 !!(link_state.pause & MLO_PAUSE_TX),
+					 !!(link_state.pause & MLO_PAUSE_RX));
+
+
+	} else {
+
+		if (pl->pcs_ops && pl->pcs_ops->pcs_link_up)
+			pl->pcs_ops->pcs_link_up(pl->pcs, pl->cur_link_an_mode,
+						 pl->cur_interface,
+						 link_state.speed, link_state.duplex);
+
+		pl->mac_ops->mac_link_up(pl->config, pl->phydev,
+					 pl->cur_link_an_mode, pl->cur_interface,
+					 link_state.speed, link_state.duplex,
+					 !!(link_state.pause & MLO_PAUSE_TX),
+					 !!(link_state.pause & MLO_PAUSE_RX));
+
+	}
 
 	if (ndev)
 		netif_carrier_on(ndev);
@@ -670,6 +728,13 @@ static void phylink_resolve(struct work_struct *w)
 			mac_config = link_state.link;
 			break;
 
+		case MLO_AN_FIXED_PHY:
+			link_state = pl->phy_state;
+			phylink_apply_manual_flow(pl, &link_state);
+			mac_config = link_state.link;
+			break;
+
+
 		case MLO_AN_INBAND:
 			phylink_mac_pcs_get_state(pl, &link_state);
 
@@ -1098,6 +1163,9 @@ int phylink_of_phy_connect(struct phylink *pl, struct device_node *dn,
 	if (!phy_node) {
 		if (pl->cfg_link_an_mode == MLO_AN_PHY)
 			return -ENODEV;
+		if (pl->cfg_link_an_mode == MLO_AN_FIXED_PHY) {
+			return -ENODEV;
+		}
 		return 0;
 	}
 
@@ -1224,10 +1292,29 @@ void phylink_start(struct phylink *pl)
 			poll = true;
 	}
 
+	if (pl->cfg_link_an_mode == MLO_AN_FIXED_PHY && pl->link_gpio) {
+		int irq = gpiod_to_irq(pl->link_gpio);
+
+		if (irq > 0) {
+			if (!request_irq(irq, phylink_link_handler,
+					 IRQF_TRIGGER_RISING |
+					 IRQF_TRIGGER_FALLING,
+					 "netdev link", pl))
+				pl->link_irq = irq;
+			else
+				irq = 0;
+		}
+		if (irq <= 0)
+			poll = true;
+	}
+	
 	switch (pl->cfg_link_an_mode) {
 	case MLO_AN_FIXED:
 		poll |= pl->config->poll_fixed_state;
 		break;
+	case MLO_AN_FIXED_PHY:
+		poll |= pl->config->poll_fixed_state;
+		break;
 	case MLO_AN_INBAND:
 		poll |= pl->config->pcs_poll;
 		if (pl->pcs)
@@ -1371,6 +1458,10 @@ int phylink_ethtool_ksettings_get(struct phylink *pl,
 		phylink_get_ksettings(&link_state, kset);
 		break;
 
+	case MLO_AN_FIXED_PHY:
+		//for reference only pl->phydev has link state (above)
+		break;
+
 	case MLO_AN_INBAND:
 		/* If there is a phy attached, then use the reported
 		 * settings from the phy with no modification.
@@ -1459,6 +1550,13 @@ int phylink_ethtool_ksettings_set(struct phylink *pl,
 			return 0;
 		}
 
+		if (pl->cur_link_an_mode == MLO_AN_FIXED_PHY) {
+			if (s->speed != pl->link_config.speed ||
+			    s->duplex != pl->link_config.duplex)
+				return -EINVAL;
+			return 0;
+		}
+
 		config.speed = s->speed;
 		config.duplex = s->duplex;
 		break;
@@ -1475,6 +1573,13 @@ int phylink_ethtool_ksettings_set(struct phylink *pl,
 			return 0;
 		}
 
+		if (pl->cur_link_an_mode == MLO_AN_FIXED_PHY) {
+			if (!linkmode_equal(config.advertising,
+					    pl->link_config.advertising))
+				return -EINVAL;
+			return 0;
+		}
+
 		config.speed = SPEED_UNKNOWN;
 		config.duplex = DUPLEX_UNKNOWN;
 		break;
@@ -1579,6 +1684,9 @@ int phylink_ethtool_set_pauseparam(struct phylink *pl,
 	if (pl->cur_link_an_mode == MLO_AN_FIXED)
 		return -EOPNOTSUPP;
 
+	if (pl->cur_link_an_mode == MLO_AN_FIXED_PHY)
+		return -EOPNOTSUPP;
+
 	if (!phylink_test(pl->supported, Pause) &&
 	    !phylink_test(pl->supported, Asym_Pause))
 		return -EOPNOTSUPP;
@@ -1846,6 +1954,14 @@ static int phylink_mii_read(struct phylink *pl, unsigned int phy_id,
 		}
 		break;
 
+	case MLO_AN_FIXED_PHY:
+		if (phy_id == 0) {
+			phylink_get_fixed_state(pl, &state);
+			val = phylink_mii_emul_read(reg, &state);
+		}
+		break;
+
+
 	case MLO_AN_PHY:
 		return -EOPNOTSUPP;
 
@@ -1867,6 +1983,9 @@ static int phylink_mii_write(struct phylink *pl, unsigned int phy_id,
 	case MLO_AN_FIXED:
 		break;
 
+	case MLO_AN_FIXED_PHY:
+		break;
+
 	case MLO_AN_PHY:
 		return -EOPNOTSUPP;
 
diff --git a/include/linux/phylink.h b/include/linux/phylink.h
index d81a714..0939557 100644
--- a/include/linux/phylink.h
+++ b/include/linux/phylink.h
@@ -20,6 +20,7 @@ enum {
 	MLO_AN_PHY = 0,	/* Conventional PHY */
 	MLO_AN_FIXED,	/* Fixed-link mode */
 	MLO_AN_INBAND,	/* In-band protocol */
+	MLO_AN_FIXED_PHY,/* Fixed-link mode with external phy*/
 };
 
 static inline bool phylink_autoneg_inband(unsigned int mode)
-- 
2.20.1

From 9d9aaf07a853ac4c5b0b658c4546523f57c663b0 Mon Sep 17 00:00:00 2001
From: Tim Hayes <tim.hayes@smartrg.com>
Date: Wed, 5 Jan 2022 06:16:27 -0800
Subject: [PATCH] OWRT-6281 _helper return and phylink_sfp_config return

---
 drivers/net/phy/phylink.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/drivers/net/phy/phylink.c b/drivers/net/phy/phylink.c
index 37131c7..f7b0aca 100644
--- a/drivers/net/phy/phylink.c
+++ b/drivers/net/phy/phylink.c
@@ -2147,6 +2147,11 @@ static int phylink_sfp_config(struct phylink *pl, u8 mode,
 	bool changed;
 	int ret;
 
+	if (pl->cfg_link_an_mode == MLO_AN_FIXED) {
+		/* fixed link params already established */
+		return 0;
+	}
+
 	linkmode_copy(support, supported);
 
 	memset(&config, 0, sizeof(config));
@@ -2364,6 +2369,9 @@ static const struct sfp_upstream_ops sfp_phylink_ops = {
  */
 void phylink_helper_basex_speed(struct phylink_link_state *state)
 {
+	/* this function causes problems for fixed links and doesn't solve any know problems */
+	if (1) return;
+
 	if (phy_interface_mode_is_8023z(state->interface)) {
 		bool want_2500 = state->an_enabled ?
 			phylink_test(state->advertising, 2500baseX_Full) :
-- 
2.20.1

From 418f0d457b38bceb2dfd3ba87249c48934fc7c79 Mon Sep 17 00:00:00 2001
From: Tim Hayes <tim.hayes@smartrg.com>
Date: Tue, 19 Apr 2022 10:30:08 -0700
Subject: [PATCH] OWRT-6281 set tx and rx pause

---
 drivers/net/phy/phylink.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/drivers/net/phy/phylink.c b/drivers/net/phy/phylink.c
index c6f106b..e6388ed 100644
--- a/drivers/net/phy/phylink.c
+++ b/drivers/net/phy/phylink.c
@@ -652,7 +652,9 @@ static void phylink_link_up(struct phylink *pl,
 			pl->pcs_ops->pcs_link_up(pl->pcs, pl->cur_link_an_mode,
 						 pl->cur_interface,
 						 pl->link_config.speed, pl->link_config.duplex);
-
+		/* OWRT-7120 we must tell the mac to support pause on the internal SGMII bus no matter what AN supports */
+		link_state.pause |= MLO_PAUSE_RX;
+ 		link_state.pause |= MLO_PAUSE_TX;
 		pl->mac_ops->mac_link_up(pl->config, pl->phydev,
 					 pl->cfg_link_an_mode, pl->cur_interface,
 					 pl->link_config.speed, pl->link_config.duplex,
-- 
2.30.2

