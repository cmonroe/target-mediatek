From 05f482dfab1f1437767e74ac1592c0cb917f57bd Mon Sep 17 00:00:00 2001
From: Tim Hayes <tim.hayes@smartrg.com>
Date: Tue, 28 Feb 2023 13:11:22 -0800
Subject: [PATCH] OWRT-7643 Adtran quirks added

---
 drivers/net/phy/sfp.c | 34 ++++++++++++++++++++++++++++++++--
 1 file changed, 32 insertions(+), 2 deletions(-)

--- a/drivers/net/phy/sfp.c
+++ b/drivers/net/phy/sfp.c
@@ -323,10 +323,12 @@ static const struct of_device_id sfp_of_
 };
 MODULE_DEVICE_TABLE(of, sfp_of_match);
 
+#if 0
 static void sfp_fixup_long_startup(struct sfp *sfp)
 {
 	sfp->module_t_start_up = T_START_UP_BAD_GPON;
 }
+#endif
 
 static void sfp_fixup_ignore_tx_fault(struct sfp *sfp)
 {
@@ -362,8 +364,19 @@ static void sfp_quirk_2500basex(const st
 				unsigned long *modes,
 				unsigned long *interfaces)
 {
+	linkmode_zero(modes);
 	linkmode_set_bit(ETHTOOL_LINK_MODE_2500baseX_Full_BIT, modes);
 	__set_bit(PHY_INTERFACE_MODE_2500BASEX, interfaces);
+	printk("%s SFP \n",__FUNCTION__);
+}
+
+static void sfp_quirk_1000basex(const struct sfp_eeprom_id *id,
+				unsigned long *modes,
+				unsigned long *interfaces)
+{
+	linkmode_zero(modes);
+	linkmode_set_bit(ETHTOOL_LINK_MODE_1000baseX_Full_BIT, modes);
+	printk("%s SFP \n",__FUNCTION__);
 }
 
 static void sfp_quirk_ubnt_uf_instant(const struct sfp_eeprom_id *id,
@@ -378,6 +391,20 @@ static void sfp_quirk_ubnt_uf_instant(co
 	linkmode_set_bit(ETHTOOL_LINK_MODE_1000baseX_Full_BIT, modes);
 }
 
+static void sfp_fixup_gpon_xxx(struct sfp *sfp)
+{
+	sfp->module_t_start_up = T_START_UP_BAD_GPON;
+	sfp->tx_fault_ignore = true;
+	sfp->state_hw_mask &= ~(SFP_F_TX_FAULT | SFP_F_LOS);
+	printk("%s SFP \n",__FUNCTION__);
+}
+
+static void sfp_fixup_copper_xxx(struct sfp *sfp)
+{
+	sfp->id.base.e1000_base_t=0;
+	printk("%s SFP \n",__FUNCTION__);
+}
+
 #define SFP_QUIRK(_v, _p, _m, _f) \
 	{ .vendor = _v, .part = _p, .modes = _m, .fixup = _f, }
 #define SFP_QUIRK_M(_v, _p, _m) SFP_QUIRK(_v, _p, _m, NULL)
@@ -386,12 +413,14 @@ static void sfp_quirk_ubnt_uf_instant(co
 static const struct sfp_quirk sfp_quirks[] = {
 	// Alcatel Lucent G-010S-P can operate at 2500base-X, but incorrectly
 	// report 2500MBd NRZ in their EEPROM
-	SFP_QUIRK_M("ALCATELLUCENT", "G010SP", sfp_quirk_2500basex),
+	// AKA Nokia from James Moffat
+	SFP_QUIRK("ALCATELLUCENT", "G010SP", sfp_quirk_2500basex,
+		  sfp_fixup_gpon_xxx),
 
 	// Alcatel Lucent G-010S-A can operate at 2500base-X, but report 3.2GBd
 	// NRZ in their EEPROM
 	SFP_QUIRK("ALCATELLUCENT", "3FE46541AA", sfp_quirk_2500basex,
-		  sfp_fixup_long_startup),
+		  sfp_fixup_gpon_xxx),
 
 	SFP_QUIRK_F("HALNy", "HL-GSFP", sfp_fixup_halny_gsfp),
 
@@ -402,11 +431,26 @@ static const struct sfp_quirk sfp_quirks
 	// Huawei MA5671A can operate at 2500base-X, but report 1.2GBd NRZ in
 	// their EEPROM
 	SFP_QUIRK("HUAWEI", "MA5671A", sfp_quirk_2500basex,
-		  sfp_fixup_ignore_tx_fault),
+		  sfp_fixup_gpon_xxx),
 
 	// OEM SFP-GE-T is 1000Base-T module
 	SFP_QUIRK_F("OEM", "SFP-GE-T", sfp_fixup_ignore_tx_fault),
 
+	// Adtran F2
+	SFP_QUIRK("T&W", "TW2362H-CDEL-ADT", sfp_quirk_2500basex,
+		  sfp_fixup_gpon_xxx),
+	// Adtran F3
+	SFP_QUIRK_M("T&W", "TW2362H-CDEL-AD1", sfp_quirk_2500basex),
+	// Adtran SDX-630
+	SFP_QUIRK("ADTRAN", "1287940F1", sfp_quirk_2500basex,
+		  sfp_fixup_gpon_xxx),
+	// Adtran 1442300G1
+	SFP_QUIRK("LINKTEL", "LX1801INA-ADT", sfp_quirk_1000basex,
+		  sfp_fixup_copper_xxx),
+	// FCLFB8521P2BTL-AR
+	SFP_QUIRK("FINISAR CORP.", "FCLF8521P2BTL-AR", sfp_quirk_1000basex,
+		  sfp_fixup_copper_xxx),
+
 	// Lantech 8330-262D-E can operate at 2500base-X, but incorrectly report
 	// 2500MBd NRZ in their EEPROM
 	SFP_QUIRK_M("Lantech", "8330-262D-E", sfp_quirk_2500basex),
