From: Chad Monroe <chad@monroe.io>
Date: Thu, 27 Apr 2023 17:00:17 -0700
Subject: [PATCH]  net: phy: mxl: toggle SGMII AN on link change 

Sometimes the GPY211 can come up and report all is well but no RX packets
are received by the MAC. For some reason toggling the SGMII AN bit clears
this condition. As a very hacky workaround, enable it during physical
link change and let gpy_update_interface disable it shortly after. 

Signed-off-by: Chad Monroe <chad@monroe.io>
---
 drivers/net/phy/mxl-gpy.c |   40 ++++++++++++++++++++++++++++++++++++
 1 file changed, 40 insertions(+)

--- a/drivers/net/phy/mxl-gpy.c
+++ b/drivers/net/phy/mxl-gpy.c
@@ -510,6 +510,8 @@ static int gpy_config_aneg(struct phy_de
 	if (phydev->state != PHY_UP)
 		return 0;
 
+//	phydev_info(phydev, "gpy_config_aneg: trigger VSPEC1_SGMII_CTRL_ANRS\n");
+
 	ret = phy_read_poll_timeout(phydev, MII_BMSR, ret, ret & BMSR_LSTATUS,
 				    20000, 4000000, false);
 	if (ret == -ETIMEDOUT)
@@ -522,6 +524,35 @@ static int gpy_config_aneg(struct phy_de
 			      VSPEC1_SGMII_CTRL_ANRS, VSPEC1_SGMII_CTRL_ANRS);
 }
 
+/**
+ * in some cases the GPY211 will link up but not RX packets
+ * 
+ * setting SGMII AN to enabled then back to disabled clears this
+ * for some reason. enable SGMII AN here and let the update
+ * interface poller clear it shortly after. 
+ */
+static void gpy_link_change_notify(struct phy_device *phydev)
+{
+#ifdef GPY_DEBUG
+	int ret;
+
+	phydev_info(phydev, "gpy_link_change_notify phydev->state=%d\n", phydev->state);
+
+	ret = phy_read_mmd(phydev, MDIO_MMD_VEND1, VSPEC1_SGMII_CTRL);
+	phydev_info(phydev, "gpy_link_change_notify VSPEC1_SGMII_CTRL=%04x set ANEN\n", ret);
+
+	ret = phy_set_bits_mmd(phydev, MDIO_MMD_VEND1, VSPEC1_SGMII_CTRL,
+			     VSPEC1_SGMII_CTRL_ANEN);
+
+	ret = phy_read_mmd(phydev, MDIO_MMD_VEND1, VSPEC1_SGMII_CTRL);
+	phydev_info(phydev, "gpy_link_change_notify VSPEC1_SGMII_CTRL=%04x DONE\n", ret);
+#else
+	phy_set_bits_mmd(phydev, MDIO_MMD_VEND1, VSPEC1_SGMII_CTRL,
+			     VSPEC1_SGMII_CTRL_ANEN);
+#endif
+
+}
+
 static void gpy_update_interface(struct phy_device *phydev)
 {
 	int ret;
@@ -810,6 +841,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		.phy_id		= PHY_ID_GPY115B,
@@ -828,6 +860,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy115_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		PHY_ID_MATCH_MODEL(PHY_ID_GPY115C),
@@ -845,6 +878,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy115_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		.phy_id		= PHY_ID_GPY211B,
@@ -863,6 +897,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		PHY_ID_MATCH_MODEL(PHY_ID_GPY211C),
@@ -880,6 +915,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		.phy_id		= PHY_ID_GPY212B,
@@ -898,6 +934,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		PHY_ID_MATCH_MODEL(PHY_ID_GPY212C),
@@ -915,6 +952,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		.phy_id		= PHY_ID_GPY215B,
@@ -933,6 +971,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		PHY_ID_MATCH_MODEL(PHY_ID_GPY215C),
@@ -950,6 +989,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		PHY_ID_MATCH_MODEL(PHY_ID_GPY241B),
@@ -967,6 +1007,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		PHY_ID_MATCH_MODEL(PHY_ID_GPY241BM),
@@ -984,6 +1025,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 	{
 		PHY_ID_MATCH_MODEL(PHY_ID_GPY245B),
@@ -1001,6 +1043,7 @@ static struct phy_driver gpy_drivers[] =
 		.set_wol	= gpy_set_wol,
 		.get_wol	= gpy_get_wol,
 		.set_loopback	= gpy_loopback,
+		.link_change_notify	= gpy_link_change_notify,
 	},
 };
 module_phy_driver(gpy_drivers);
