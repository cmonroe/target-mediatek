--- a/sound/soc/mediatek/mt7986/mt7986-dai-etdm.c
+++ b/sound/soc/mediatek/mt7986/mt7986-dai-etdm.c
@@ -146,6 +146,7 @@ static void mtk_dai_etdm_shutdown(struct
 	clk_bulk_disable_unprepare(afe_priv->num_clks, afe_priv->clks);
 }
 
+#if 0 // D2 MOD
 static unsigned int get_etdm_ch_fixup(unsigned int channels)
 {
 	if (channels > 16)
@@ -159,6 +160,7 @@ static unsigned int get_etdm_ch_fixup(un
 	else
 		return 2;
 }
+#endif
 
 static int mtk_dai_etdm_config(struct mtk_base_afe *afe,
 			       struct snd_pcm_hw_params *params,
@@ -170,7 +172,9 @@ static int mtk_dai_etdm_config(struct mt
 	unsigned int rate = params_rate(params);
 	unsigned int etdm_rate = mt7986_etdm_rate_transform(afe->dev, rate);
 	unsigned int afe_rate = mt7986_afe_rate_transform(afe->dev, rate);
+#if 0 // D2 MOD
 	unsigned int channels = params_channels(params);
+#endif
 	unsigned int bit_width = params_width(params);
 	unsigned int wlen = get_etdm_wlen(bit_width);
 	unsigned int val = 0;
@@ -187,7 +191,11 @@ static int mtk_dai_etdm_config(struct mt
 	mask |= ETDM_FMT_MASK;
 	val |= FIELD_PREP(ETDM_FMT_MASK, etdm_data->format);
 	mask |= ETDM_CH_NUM_MASK;
+#if 0 // D2 MOD
 	val |= FIELD_PREP(ETDM_CH_NUM_MASK, get_etdm_ch_fixup(channels) - 1);
+#else
+	val |= FIELD_PREP(ETDM_CH_NUM_MASK, 3);
+#endif
 	mask |= RELATCH_SRC_MASK;
 	val |= FIELD_PREP(RELATCH_SRC_MASK, APLL_CLK);
 
@@ -204,9 +212,11 @@ static int mtk_dai_etdm_config(struct mt
 		regmap_update_bits(afe->regmap, ETDM_OUT5_CON4,
 				   OUT_SEL_FS_MASK, OUT_SEL_FS(etdm_rate));
 
+#if 0 /* D2 MOD: Diable the 16kHz wideband PCM, use the default 8kHz narrowband */
 		/* set ETDM_OUT5_CON5 */
 		regmap_update_bits(afe->regmap, ETDM_OUT5_CON5,
 				   ETDM_CLK_DIV_MASK, ETDM_CLK_DIV);
+#endif
 		break;
 	case SNDRV_PCM_STREAM_CAPTURE:
 		/* set ETDM_IN5_CON0 */
