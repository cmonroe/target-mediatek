From 80e44de71773d2899adba559ec6a79b81d554991 Mon Sep 17 00:00:00 2001
From: developer <developer@mediatek.com>
Date: Thu, 9 Nov 2023 12:58:13 +0800
Subject: [PATCH] [][kernel][mt7988][pcie][Add WIFI HW reset flow]

[Description]
Add WIFI HW reset before PCIe host detects EP device for reboot.

[Release-log]
NA

Change-Id: I5bfad61d088c029d791747eb5fd40d118918a2f7
Reviewed-on: https://gerrit.mediatek.inc/c/openwrt/feeds/mtk_openwrt_feeds/+/8227163
---
 .../pci/controller/pcie-mediatek-gen3.c       | 36 +++++++++++++++++++
 1 file changed, 36 insertions(+)

--- a/drivers/pci/controller/pcie-mediatek-gen3.c
+++ b/drivers/pci/controller/pcie-mediatek-gen3.c
@@ -8,6 +8,8 @@
 
 #include <linux/clk.h>
 #include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
 #include <linux/iopoll.h>
 #include <linux/irq.h>
 #include <linux/irqchip/chained_irq.h>
@@ -15,6 +17,7 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/msi.h>
+#include <linux/of_gpio.h>
 #include <linux/pci.h>
 #include <linux/phy/phy.h>
 #include <linux/platform_device.h>
@@ -142,6 +145,9 @@ struct mtk_gen3_pcie {
 	struct clk_bulk_data *clks;
 	int num_clks;
 
+	struct gpio_desc *wifi_reset;
+	u32 wifi_reset_delay_ms;
+
 	int irq;
 	u32 saved_irq_state;
 	raw_spinlock_t irq_lock;
@@ -361,6 +367,14 @@ static int mtk_pcie_startup_port(struct
 	val |= PCIE_DISABLE_DVFSRC_VLT_REQ;
 	writel_relaxed(val, pcie->base + PCIE_MISC_CTRL_REG);
 
+	if (pcie->wifi_reset) {
+		dev_info(pcie->dev, "set wifi-reset pin LOW");
+		gpiod_set_value_cansleep(pcie->wifi_reset, 0);
+		msleep(pcie->wifi_reset_delay_ms);
+		dev_info(pcie->dev, "set wifi-reset pin HIGH");
+		gpiod_set_value_cansleep(pcie->wifi_reset, 1);
+	}
+
 	/* Assert all reset signals */
 	val = readl_relaxed(pcie->base + PCIE_RST_CTRL_REG);
 	val |= PCIE_MAC_RSTB | PCIE_PHY_RSTB | PCIE_BRG_RSTB | PCIE_PE_RSTB;
@@ -830,6 +844,23 @@ static int mtk_pcie_parse_port(struct mt
 		return pcie->num_clks;
 	}
 
+	pcie->wifi_reset = devm_gpiod_get_optional(dev, "wifi-reset",
+						GPIOD_OUT_HIGH);
+	ret = PTR_ERR_OR_ZERO(pcie->wifi_reset);
+	if (ret) {
+		dev_err(dev, "failed to request reset gpio: %d\n", ret);
+		return ret;
+	} else {
+		ret = gpiod_set_consumer_name(pcie->wifi_reset, "pcie_reset");
+		if (ret) {
+			dev_err(dev, "failed to set reset gpio name: %d\n", ret);
+			return ret;
+		}
+
+		of_property_read_u32(dev->of_node, "wifi-reset-msleep",
+					 &pcie->wifi_reset_delay_ms);
+	}
+
 	return 0;
 }
 
