Index: linux-5.15.86/drivers/spi/spi-mt65xx.c
===================================================================
--- linux-5.15.86.orig/drivers/spi/spi-mt65xx.c
+++ linux-5.15.86/drivers/spi/spi-mt65xx.c
@@ -12,12 +12,11 @@
 #include <linux/ioport.h>
 #include <linux/module.h>
 #include <linux/of.h>
-#include <linux/gpio/consumer.h>
+#include <linux/of_gpio.h>
 #include <linux/platform_device.h>
 #include <linux/platform_data/spi-mt65xx.h>
 #include <linux/pm_runtime.h>
 #include <linux/spi/spi.h>
-#include <linux/spi/spi-mem.h>
 #include <linux/dma-mapping.h>
 
 #define SPI_CFG0_REG                      0x0000
@@ -32,7 +31,6 @@
 #define SPI_CFG2_REG                      0x0028
 #define SPI_TX_SRC_REG_64                 0x002c
 #define SPI_RX_DST_REG_64                 0x0030
-#define SPI_CFG3_IPM_REG                  0x0040
 
 #define SPI_CFG0_SCK_HIGH_OFFSET          0
 #define SPI_CFG0_SCK_LOW_OFFSET           8
@@ -44,16 +42,11 @@
 #define SPI_CFG1_CS_IDLE_OFFSET           0
 #define SPI_CFG1_PACKET_LOOP_OFFSET       8
 #define SPI_CFG1_PACKET_LENGTH_OFFSET     16
-#define SPI_CFG1_GET_TICK_DLY_OFFSET      29
-#define SPI_CFG1_GET_TICK_DLY_OFFSET_V1   30
-
-#define SPI_CFG1_GET_TICK_DLY_MASK        0xe0000000
-#define SPI_CFG1_GET_TICK_DLY_MASK_V1     0xc0000000
+#define SPI_CFG1_GET_TICK_DLY_OFFSET      30
 
 #define SPI_CFG1_CS_IDLE_MASK             0xff
 #define SPI_CFG1_PACKET_LOOP_MASK         0xff00
 #define SPI_CFG1_PACKET_LENGTH_MASK       0x3ff0000
-#define SPI_CFG1_IPM_PACKET_LENGTH_MASK   GENMASK(31, 16)
 #define SPI_CFG2_SCK_HIGH_OFFSET          0
 #define SPI_CFG2_SCK_LOW_OFFSET           16
 
@@ -74,24 +67,6 @@
 #define SPI_CMD_TX_ENDIAN            BIT(15)
 #define SPI_CMD_FINISH_IE            BIT(16)
 #define SPI_CMD_PAUSE_IE             BIT(17)
-#define SPI_CMD_IPM_NONIDLE_MODE     BIT(19)
-#define SPI_CMD_IPM_SPIM_LOOP        BIT(21)
-#define SPI_CMD_IPM_GET_TICKDLY_OFFSET    22
-
-#define SPI_CMD_IPM_GET_TICKDLY_MASK	GENMASK(24, 22)
-
-#define PIN_MODE_CFG(x)	((x) / 2)
-
-#define SPI_CFG3_IPM_HALF_DUPLEX_DIR		BIT(2)
-#define SPI_CFG3_IPM_HALF_DUPLEX_EN		BIT(3)
-#define SPI_CFG3_IPM_XMODE_EN			BIT(4)
-#define SPI_CFG3_IPM_NODATA_FLAG		BIT(5)
-#define SPI_CFG3_IPM_CMD_BYTELEN_OFFSET		8
-#define SPI_CFG3_IPM_ADDR_BYTELEN_OFFSET	12
-
-#define SPI_CFG3_IPM_CMD_PIN_MODE_MASK		GENMASK(1, 0)
-#define SPI_CFG3_IPM_CMD_BYTELEN_MASK		GENMASK(11, 8)
-#define SPI_CFG3_IPM_ADDR_BYTELEN_MASK		GENMASK(15, 12)
 
 #define MT8173_SPI_MAX_PAD_SEL 3
 
@@ -102,9 +77,6 @@
 
 #define MTK_SPI_MAX_FIFO_SIZE 32U
 #define MTK_SPI_PACKET_SIZE 1024
-#define MTK_SPI_IPM_PACKET_SIZE SZ_64K
-#define MTK_SPI_IPM_PACKET_LOOP SZ_256
-
 #define MTK_SPI_32BITS_MASK  (0xffffffff)
 
 #define DMA_ADDR_EXT_BITS (36)
@@ -118,10 +90,6 @@ struct mtk_spi_compatible {
 	bool enhance_timing;
 	/* some IC support DMA addr extension */
 	bool dma_ext;
-	/* some IC no need unprepare SPI clk */
-	bool no_need_unprepare;
-	/* IPM design adjust and extend register to support more features */
-	bool ipm_design;
 };
 
 struct mtk_spi {
@@ -129,19 +97,13 @@ struct mtk_spi {
 	u32 state;
 	int pad_num;
 	u32 *pad_sel;
-	struct clk *parent_clk, *sel_clk, *spi_clk, *spi_hclk;
+	struct clk *parent_clk, *sel_clk, *spi_clk;
 	struct spi_transfer *cur_transfer;
 	u32 xfer_len;
 	u32 num_xfered;
 	struct scatterlist *tx_sgl, *rx_sgl;
 	u32 tx_sgl_len, rx_sgl_len;
 	const struct mtk_spi_compatible *dev_comp;
-	u32 spi_clk_hz;
-	struct completion spimem_done;
-	bool use_spimem;
-	struct device *dev;
-	dma_addr_t tx_dma;
-	dma_addr_t rx_dma;
 };
 
 static const struct mtk_spi_compatible mtk_common_compat;
@@ -150,12 +112,6 @@ static const struct mtk_spi_compatible m
 	.must_tx = true,
 };
 
-static const struct mtk_spi_compatible mtk_ipm_compat = {
-	.enhance_timing = true,
-	.dma_ext = true,
-	.ipm_design = true,
-};
-
 static const struct mtk_spi_compatible mt6765_compat = {
 	.need_pad_sel = true,
 	.must_tx = true,
@@ -179,27 +135,15 @@ static const struct mtk_spi_compatible m
 	.enhance_timing = true,
 };
 
-static const struct mtk_spi_compatible mt6893_compat = {
-	.need_pad_sel = true,
-	.must_tx = true,
-	.enhance_timing = true,
-	.dma_ext = true,
-	.no_need_unprepare = true,
-};
-
 /*
  * A piece of default chip info unless the platform
  * supplies it.
  */
 static const struct mtk_chip_config mtk_default_chip_info = {
 	.sample_sel = 0,
-	.tick_delay = 0,
 };
 
 static const struct of_device_id mtk_spi_of_match[] = {
-	{ .compatible = "mediatek,spi-ipm",
-		.data = (void *)&mtk_ipm_compat,
-	},
 	{ .compatible = "mediatek,mt2701-spi",
 		.data = (void *)&mtk_common_compat,
 	},
@@ -230,9 +174,6 @@ static const struct of_device_id mtk_spi
 	{ .compatible = "mediatek,mt8192-spi",
 		.data = (void *)&mt6765_compat,
 	},
-	{ .compatible = "mediatek,mt6893-spi",
-		.data = (void *)&mt6893_compat,
-	},
 	{}
 };
 MODULE_DEVICE_TABLE(of, mtk_spi_of_match);
@@ -251,78 +192,12 @@ static void mtk_spi_reset(struct mtk_spi
 	writel(reg_val, mdata->base + SPI_CMD_REG);
 }
 
-static int mtk_spi_set_hw_cs_timing(struct spi_device *spi)
-{
-	struct mtk_spi *mdata = spi_master_get_devdata(spi->master);
-	struct spi_delay *cs_setup = &spi->cs_setup;
-	struct spi_delay *cs_hold = &spi->cs_hold;
-	struct spi_delay *cs_inactive = &spi->cs_inactive;
-	u32 setup, hold, inactive;
-	u32 reg_val;
-	int delay;
-
-	delay = spi_delay_to_ns(cs_setup, NULL);
-	if (delay < 0)
-		return delay;
-	setup = (delay * DIV_ROUND_UP(mdata->spi_clk_hz, 1000000)) / 1000;
-
-	delay = spi_delay_to_ns(cs_hold, NULL);
-	if (delay < 0)
-		return delay;
-	hold = (delay * DIV_ROUND_UP(mdata->spi_clk_hz, 1000000)) / 1000;
-
-	delay = spi_delay_to_ns(cs_inactive, NULL);
-	if (delay < 0)
-		return delay;
-	inactive = (delay * DIV_ROUND_UP(mdata->spi_clk_hz, 1000000)) / 1000;
-
-	if (hold || setup) {
-		reg_val = readl(mdata->base + SPI_CFG0_REG);
-		if (mdata->dev_comp->enhance_timing) {
-			if (hold) {
-				hold = min_t(u32, hold, 0x10000);
-				reg_val &= ~(0xffff << SPI_ADJUST_CFG0_CS_HOLD_OFFSET);
-				reg_val |= (((hold - 1) & 0xffff)
-					<< SPI_ADJUST_CFG0_CS_HOLD_OFFSET);
-			}
-			if (setup) {
-				setup = min_t(u32, setup, 0x10000);
-				reg_val &= ~(0xffff << SPI_ADJUST_CFG0_CS_SETUP_OFFSET);
-				reg_val |= (((setup - 1) & 0xffff)
-					<< SPI_ADJUST_CFG0_CS_SETUP_OFFSET);
-			}
-		} else {
-			if (hold) {
-				hold = min_t(u32, hold, 0x100);
-				reg_val &= ~(0xff << SPI_CFG0_CS_HOLD_OFFSET);
-				reg_val |= (((hold - 1) & 0xff) << SPI_CFG0_CS_HOLD_OFFSET);
-			}
-			if (setup) {
-				setup = min_t(u32, setup, 0x100);
-				reg_val &= ~(0xff << SPI_CFG0_CS_SETUP_OFFSET);
-				reg_val |= (((setup - 1) & 0xff)
-					<< SPI_CFG0_CS_SETUP_OFFSET);
-			}
-		}
-		writel(reg_val, mdata->base + SPI_CFG0_REG);
-	}
-
-	if (inactive) {
-		inactive = min_t(u32, inactive, 0x100);
-		reg_val = readl(mdata->base + SPI_CFG1_REG);
-		reg_val &= ~SPI_CFG1_CS_IDLE_MASK;
-		reg_val |= (((inactive - 1) & 0xff) << SPI_CFG1_CS_IDLE_OFFSET);
-		writel(reg_val, mdata->base + SPI_CFG1_REG);
-	}
-
-	return 0;
-}
-
-static int mtk_spi_hw_init(struct spi_master *master,
-			   struct spi_device *spi)
+static int mtk_spi_prepare_message(struct spi_master *master,
+				   struct spi_message *msg)
 {
 	u16 cpha, cpol;
 	u32 reg_val;
+	struct spi_device *spi = msg->spi;
 	struct mtk_chip_config *chip_config = spi->controller_data;
 	struct mtk_spi *mdata = spi_master_get_devdata(master);
 
@@ -330,15 +205,6 @@ static int mtk_spi_hw_init(struct spi_ma
 	cpol = spi->mode & SPI_CPOL ? 1 : 0;
 
 	reg_val = readl(mdata->base + SPI_CMD_REG);
-	if (mdata->dev_comp->ipm_design) {
-		/* SPI transfer without idle time until packet length done */
-		reg_val |= SPI_CMD_IPM_NONIDLE_MODE;
-		if (spi->mode & SPI_LOOP)
-			reg_val |= SPI_CMD_IPM_SPIM_LOOP;
-		else
-			reg_val &= ~SPI_CMD_IPM_SPIM_LOOP;
-	}
-
 	if (cpha)
 		reg_val |= SPI_CMD_CPHA;
 	else
@@ -395,40 +261,9 @@ static int mtk_spi_hw_init(struct spi_ma
 		writel(mdata->pad_sel[spi->chip_select],
 		       mdata->base + SPI_PAD_SEL_REG);
 
-	/* tick delay */
-	if (mdata->dev_comp->enhance_timing) {
-		if (mdata->dev_comp->ipm_design) {
-			reg_val = readl(mdata->base + SPI_CMD_REG);
-			reg_val &= ~SPI_CMD_IPM_GET_TICKDLY_MASK;
-			reg_val |= ((chip_config->tick_delay & 0x7)
-				    << SPI_CMD_IPM_GET_TICKDLY_OFFSET);
-			writel(reg_val, mdata->base + SPI_CMD_REG);
-		} else {
-			reg_val = readl(mdata->base + SPI_CFG1_REG);
-			reg_val &= ~SPI_CFG1_GET_TICK_DLY_MASK;
-			reg_val |= ((chip_config->tick_delay & 0x7)
-				    << SPI_CFG1_GET_TICK_DLY_OFFSET);
-			writel(reg_val, mdata->base + SPI_CFG1_REG);
-		}
-	} else {
-		reg_val = readl(mdata->base + SPI_CFG1_REG);
-		reg_val &= ~SPI_CFG1_GET_TICK_DLY_MASK_V1;
-		reg_val |= ((chip_config->tick_delay & 0x3)
-			    << SPI_CFG1_GET_TICK_DLY_OFFSET_V1);
-		writel(reg_val, mdata->base + SPI_CFG1_REG);
-	}
-
-	/* set hw cs timing */
-	mtk_spi_set_hw_cs_timing(spi);
 	return 0;
 }
 
-static int mtk_spi_prepare_message(struct spi_master *master,
-				   struct spi_message *msg)
-{
-	return mtk_spi_hw_init(master, msg->spi);
-}
-
 static void mtk_spi_set_cs(struct spi_device *spi, bool enable)
 {
 	u32 reg_val;
@@ -450,36 +285,44 @@ static void mtk_spi_set_cs(struct spi_de
 }
 
 static void mtk_spi_prepare_transfer(struct spi_master *master,
-				     u32 speed_hz)
+				     struct spi_transfer *xfer)
 {
-	u32 div, sck_time, reg_val;
+	u32 spi_clk_hz, div, sck_time, cs_time, reg_val;
 	struct mtk_spi *mdata = spi_master_get_devdata(master);
 
-	if (speed_hz < mdata->spi_clk_hz / 2)
-		div = DIV_ROUND_UP(mdata->spi_clk_hz, speed_hz);
+	spi_clk_hz = clk_get_rate(mdata->spi_clk);
+	if (xfer->speed_hz < spi_clk_hz / 2)
+		div = DIV_ROUND_UP(spi_clk_hz, xfer->speed_hz);
 	else
 		div = 1;
 
 	sck_time = (div + 1) / 2;
+	cs_time = sck_time * 2;
 
 	if (mdata->dev_comp->enhance_timing) {
-		reg_val = readl(mdata->base + SPI_CFG2_REG);
-		reg_val &= ~(0xffff << SPI_CFG2_SCK_HIGH_OFFSET);
-		reg_val |= (((sck_time - 1) & 0xffff)
+		reg_val = (((sck_time - 1) & 0xffff)
 			   << SPI_CFG2_SCK_HIGH_OFFSET);
-		reg_val &= ~(0xffff << SPI_CFG2_SCK_LOW_OFFSET);
 		reg_val |= (((sck_time - 1) & 0xffff)
 			   << SPI_CFG2_SCK_LOW_OFFSET);
 		writel(reg_val, mdata->base + SPI_CFG2_REG);
+		reg_val = (((cs_time - 1) & 0xffff)
+			   << SPI_ADJUST_CFG0_CS_HOLD_OFFSET);
+		reg_val |= (((cs_time - 1) & 0xffff)
+			   << SPI_ADJUST_CFG0_CS_SETUP_OFFSET);
+		writel(reg_val, mdata->base + SPI_CFG0_REG);
 	} else {
-		reg_val = readl(mdata->base + SPI_CFG0_REG);
-		reg_val &= ~(0xff << SPI_CFG0_SCK_HIGH_OFFSET);
-		reg_val |= (((sck_time - 1) & 0xff)
+		reg_val = (((sck_time - 1) & 0xff)
 			   << SPI_CFG0_SCK_HIGH_OFFSET);
-		reg_val &= ~(0xff << SPI_CFG0_SCK_LOW_OFFSET);
 		reg_val |= (((sck_time - 1) & 0xff) << SPI_CFG0_SCK_LOW_OFFSET);
+		reg_val |= (((cs_time - 1) & 0xff) << SPI_CFG0_CS_HOLD_OFFSET);
+		reg_val |= (((cs_time - 1) & 0xff) << SPI_CFG0_CS_SETUP_OFFSET);
 		writel(reg_val, mdata->base + SPI_CFG0_REG);
 	}
+
+	reg_val = readl(mdata->base + SPI_CFG1_REG);
+	reg_val &= ~SPI_CFG1_CS_IDLE_MASK;
+	reg_val |= (((cs_time - 1) & 0xff) << SPI_CFG1_CS_IDLE_OFFSET);
+	writel(reg_val, mdata->base + SPI_CFG1_REG);
 }
 
 static void mtk_spi_setup_packet(struct spi_master *master)
@@ -487,24 +330,12 @@ static void mtk_spi_setup_packet(struct
 	u32 packet_size, packet_loop, reg_val;
 	struct mtk_spi *mdata = spi_master_get_devdata(master);
 
-	if (mdata->dev_comp->ipm_design)
-		packet_size = min_t(u32,
-				    mdata->xfer_len,
-				    MTK_SPI_IPM_PACKET_SIZE);
-	else
-		packet_size = min_t(u32,
-				    mdata->xfer_len,
-				    MTK_SPI_PACKET_SIZE);
-
+	packet_size = min_t(u32, mdata->xfer_len, MTK_SPI_PACKET_SIZE);
 	packet_loop = mdata->xfer_len / packet_size;
 
 	reg_val = readl(mdata->base + SPI_CFG1_REG);
-	if (mdata->dev_comp->ipm_design)
-		reg_val &= ~SPI_CFG1_IPM_PACKET_LENGTH_MASK;
-	else
-		reg_val &= ~SPI_CFG1_PACKET_LENGTH_MASK;
+	reg_val &= ~(SPI_CFG1_PACKET_LENGTH_MASK | SPI_CFG1_PACKET_LOOP_MASK);
 	reg_val |= (packet_size - 1) << SPI_CFG1_PACKET_LENGTH_OFFSET;
-	reg_val &= ~SPI_CFG1_PACKET_LOOP_MASK;
 	reg_val |= (packet_loop - 1) << SPI_CFG1_PACKET_LOOP_OFFSET;
 	writel(reg_val, mdata->base + SPI_CFG1_REG);
 }
@@ -599,7 +430,7 @@ static int mtk_spi_fifo_transfer(struct
 	mdata->cur_transfer = xfer;
 	mdata->xfer_len = min(MTK_SPI_MAX_FIFO_SIZE, xfer->len);
 	mdata->num_xfered = 0;
-	mtk_spi_prepare_transfer(master, xfer->speed_hz);
+	mtk_spi_prepare_transfer(master, xfer);
 	mtk_spi_setup_packet(master);
 
 	if (xfer->tx_buf) {
@@ -632,7 +463,7 @@ static int mtk_spi_dma_transfer(struct s
 	mdata->cur_transfer = xfer;
 	mdata->num_xfered = 0;
 
-	mtk_spi_prepare_transfer(master, xfer->speed_hz);
+	mtk_spi_prepare_transfer(master, xfer);
 
 	cmd = readl(mdata->base + SPI_CMD_REG);
 	if (xfer->tx_buf)
@@ -667,19 +498,6 @@ static int mtk_spi_transfer_one(struct s
 				struct spi_device *spi,
 				struct spi_transfer *xfer)
 {
-	struct mtk_spi *mdata = spi_master_get_devdata(spi->master);
-	u32 reg_val = 0;
-
-	/* prepare xfer direction and duplex mode */
-	if (mdata->dev_comp->ipm_design) {
-		if (!xfer->tx_buf || !xfer->rx_buf) {
-			reg_val |= SPI_CFG3_IPM_HALF_DUPLEX_EN;
-			if (xfer->rx_buf)
-				reg_val |= SPI_CFG3_IPM_HALF_DUPLEX_DIR;
-		}
-		writel(reg_val, mdata->base + SPI_CFG3_IPM_REG);
-	}
-
 	if (master->can_dma(master, spi, xfer))
 		return mtk_spi_dma_transfer(master, spi, xfer);
 	else
@@ -703,9 +521,8 @@ static int mtk_spi_setup(struct spi_devi
 	if (!spi->controller_data)
 		spi->controller_data = (void *)&mtk_default_chip_info;
 
-	if (mdata->dev_comp->need_pad_sel && spi->cs_gpiod)
-		/* CS de-asserted, gpiolib will handle inversion */
-		gpiod_direction_output(spi->cs_gpiod, 0);
+	if (mdata->dev_comp->need_pad_sel && gpio_is_valid(spi->cs_gpio))
+		gpio_direction_output(spi->cs_gpio, !(spi->mode & SPI_CS_HIGH));
 
 	return 0;
 }
@@ -723,12 +540,6 @@ static irqreturn_t mtk_spi_interrupt(int
 	else
 		mdata->state = MTK_SPI_IDLE;
 
-	/* SPI-MEM ops */
-	if (mdata->use_spimem) {
-		complete(&mdata->spimem_done);
-		return IRQ_HANDLED;
-	}
-
 	if (!master->can_dma(master, NULL, trans)) {
 		if (trans->rx_buf) {
 			cnt = mdata->xfer_len / 4;
@@ -812,274 +623,6 @@ static irqreturn_t mtk_spi_interrupt(int
 	return IRQ_HANDLED;
 }
 
-static int mtk_spi_mem_adjust_op_size(struct spi_mem *mem,
-				      struct spi_mem_op *op)
-{
-	int opcode_len;
-
-	if (op->data.dir != SPI_MEM_NO_DATA) {
-		opcode_len = 1 + op->addr.nbytes + op->dummy.nbytes;
-		if (opcode_len + op->data.nbytes > MTK_SPI_IPM_PACKET_SIZE) {
-			op->data.nbytes = MTK_SPI_IPM_PACKET_SIZE - opcode_len;
-			/* force data buffer dma-aligned. */
-			op->data.nbytes -= op->data.nbytes % 4;
-		}
-	}
-
-	return 0;
-}
-
-static bool mtk_spi_mem_supports_op(struct spi_mem *mem,
-				    const struct spi_mem_op *op)
-{
-	if (!spi_mem_default_supports_op(mem, op))
-		return false;
-
-	if (op->addr.nbytes && op->dummy.nbytes &&
-	    op->addr.buswidth != op->dummy.buswidth)
-		return false;
-
-	if (op->addr.nbytes + op->dummy.nbytes > 16)
-		return false;
-
-	if (op->data.nbytes > MTK_SPI_IPM_PACKET_SIZE) {
-		if (op->data.nbytes / MTK_SPI_IPM_PACKET_SIZE >
-		    MTK_SPI_IPM_PACKET_LOOP ||
-		    op->data.nbytes % MTK_SPI_IPM_PACKET_SIZE != 0)
-			return false;
-	}
-
-	return true;
-}
-
-static void mtk_spi_mem_setup_dma_xfer(struct spi_master *master,
-				       const struct spi_mem_op *op)
-{
-	struct mtk_spi *mdata = spi_master_get_devdata(master);
-
-	writel((u32)(mdata->tx_dma & MTK_SPI_32BITS_MASK),
-	       mdata->base + SPI_TX_SRC_REG);
-#ifdef CONFIG_ARCH_DMA_ADDR_T_64BIT
-	if (mdata->dev_comp->dma_ext)
-		writel((u32)(mdata->tx_dma >> 32),
-		       mdata->base + SPI_TX_SRC_REG_64);
-#endif
-
-	if (op->data.dir == SPI_MEM_DATA_IN) {
-		writel((u32)(mdata->rx_dma & MTK_SPI_32BITS_MASK),
-		       mdata->base + SPI_RX_DST_REG);
-#ifdef CONFIG_ARCH_DMA_ADDR_T_64BIT
-		if (mdata->dev_comp->dma_ext)
-			writel((u32)(mdata->rx_dma >> 32),
-			       mdata->base + SPI_RX_DST_REG_64);
-#endif
-	}
-}
-
-static int mtk_spi_transfer_wait(struct spi_mem *mem,
-				 const struct spi_mem_op *op)
-{
-	struct mtk_spi *mdata = spi_master_get_devdata(mem->spi->master);
-	/*
-	 * For each byte we wait for 8 cycles of the SPI clock.
-	 * Since speed is defined in Hz and we want milliseconds,
-	 * so it should be 8 * 1000.
-	 */
-	u64 ms = 8000LL;
-
-	if (op->data.dir == SPI_MEM_NO_DATA)
-		ms *= 32; /* prevent we may get 0 for short transfers. */
-	else
-		ms *= op->data.nbytes;
-	ms = div_u64(ms, mem->spi->max_speed_hz);
-	ms += ms + 1000; /* 1s tolerance */
-
-	if (ms > UINT_MAX)
-		ms = UINT_MAX;
-
-	if (!wait_for_completion_timeout(&mdata->spimem_done,
-					 msecs_to_jiffies(ms))) {
-		dev_err(mdata->dev, "spi-mem transfer timeout\n");
-		return -ETIMEDOUT;
-	}
-
-	return 0;
-}
-
-static int mtk_spi_mem_exec_op(struct spi_mem *mem,
-			       const struct spi_mem_op *op)
-{
-	struct mtk_spi *mdata = spi_master_get_devdata(mem->spi->master);
-	u32 reg_val, nio, tx_size;
-	char *tx_tmp_buf, *rx_tmp_buf;
-	int ret = 0;
-
-	mdata->use_spimem = true;
-	reinit_completion(&mdata->spimem_done);
-
-	mtk_spi_reset(mdata);
-	mtk_spi_hw_init(mem->spi->master, mem->spi);
-	mtk_spi_prepare_transfer(mem->spi->master, mem->spi->max_speed_hz);
-
-	reg_val = readl(mdata->base + SPI_CFG3_IPM_REG);
-	/* opcode byte len */
-	reg_val &= ~SPI_CFG3_IPM_CMD_BYTELEN_MASK;
-	reg_val |= 1 << SPI_CFG3_IPM_CMD_BYTELEN_OFFSET;
-
-	/* addr & dummy byte len */
-	reg_val &= ~SPI_CFG3_IPM_ADDR_BYTELEN_MASK;
-	if (op->addr.nbytes || op->dummy.nbytes)
-		reg_val |= (op->addr.nbytes + op->dummy.nbytes) <<
-			    SPI_CFG3_IPM_ADDR_BYTELEN_OFFSET;
-
-	/* data byte len */
-	if (op->data.dir == SPI_MEM_NO_DATA) {
-		reg_val |= SPI_CFG3_IPM_NODATA_FLAG;
-		writel(0, mdata->base + SPI_CFG1_REG);
-	} else {
-		reg_val &= ~SPI_CFG3_IPM_NODATA_FLAG;
-		mdata->xfer_len = op->data.nbytes;
-		mtk_spi_setup_packet(mem->spi->master);
-	}
-
-	if (op->addr.nbytes || op->dummy.nbytes) {
-		if (op->addr.buswidth == 1 || op->dummy.buswidth == 1)
-			reg_val |= SPI_CFG3_IPM_XMODE_EN;
-		else
-			reg_val &= ~SPI_CFG3_IPM_XMODE_EN;
-	}
-
-	if (op->addr.buswidth == 2 ||
-	    op->dummy.buswidth == 2 ||
-	    op->data.buswidth == 2)
-		nio = 2;
-	else if (op->addr.buswidth == 4 ||
-		 op->dummy.buswidth == 4 ||
-		 op->data.buswidth == 4)
-		nio = 4;
-	else
-		nio = 1;
-
-	reg_val &= ~SPI_CFG3_IPM_CMD_PIN_MODE_MASK;
-	reg_val |= PIN_MODE_CFG(nio);
-
-	reg_val |= SPI_CFG3_IPM_HALF_DUPLEX_EN;
-	if (op->data.dir == SPI_MEM_DATA_IN)
-		reg_val |= SPI_CFG3_IPM_HALF_DUPLEX_DIR;
-	else
-		reg_val &= ~SPI_CFG3_IPM_HALF_DUPLEX_DIR;
-	writel(reg_val, mdata->base + SPI_CFG3_IPM_REG);
-
-	tx_size = 1 + op->addr.nbytes + op->dummy.nbytes;
-	if (op->data.dir == SPI_MEM_DATA_OUT)
-		tx_size += op->data.nbytes;
-
-	tx_size = max_t(u32, tx_size, 32);
-
-	tx_tmp_buf = kzalloc(tx_size, GFP_KERNEL | GFP_DMA);
-	if (!tx_tmp_buf) {
-		mdata->use_spimem = false;
-		return -ENOMEM;
-	}
-
-	tx_tmp_buf[0] = op->cmd.opcode;
-
-	if (op->addr.nbytes) {
-		int i;
-
-		for (i = 0; i < op->addr.nbytes; i++)
-			tx_tmp_buf[i + 1] = op->addr.val >>
-					(8 * (op->addr.nbytes - i - 1));
-	}
-
-	if (op->dummy.nbytes)
-		memset(tx_tmp_buf + op->addr.nbytes + 1,
-		       0xff,
-		       op->dummy.nbytes);
-
-	if (op->data.nbytes && op->data.dir == SPI_MEM_DATA_OUT)
-		memcpy(tx_tmp_buf + op->dummy.nbytes + op->addr.nbytes + 1,
-		       op->data.buf.out,
-		       op->data.nbytes);
-
-	mdata->tx_dma = dma_map_single(mdata->dev, tx_tmp_buf,
-				       tx_size, DMA_TO_DEVICE);
-	if (dma_mapping_error(mdata->dev, mdata->tx_dma)) {
-		ret = -ENOMEM;
-		goto err_exit;
-	}
-
-	if (op->data.dir == SPI_MEM_DATA_IN) {
-		if (!IS_ALIGNED((size_t)op->data.buf.in, 4)) {
-			rx_tmp_buf = kzalloc(op->data.nbytes,
-					     GFP_KERNEL | GFP_DMA);
-			if (!rx_tmp_buf) {
-				ret = -ENOMEM;
-				goto unmap_tx_dma;
-			}
-		} else {
-			rx_tmp_buf = op->data.buf.in;
-		}
-
-		mdata->rx_dma = dma_map_single(mdata->dev,
-					       rx_tmp_buf,
-					       op->data.nbytes,
-					       DMA_FROM_DEVICE);
-		if (dma_mapping_error(mdata->dev, mdata->rx_dma)) {
-			ret = -ENOMEM;
-			goto kfree_rx_tmp_buf;
-		}
-	}
-
-	reg_val = readl(mdata->base + SPI_CMD_REG);
-	reg_val |= SPI_CMD_TX_DMA;
-	if (op->data.dir == SPI_MEM_DATA_IN)
-		reg_val |= SPI_CMD_RX_DMA;
-	writel(reg_val, mdata->base + SPI_CMD_REG);
-
-	mtk_spi_mem_setup_dma_xfer(mem->spi->master, op);
-
-	mtk_spi_enable_transfer(mem->spi->master);
-
-	/* Wait for the interrupt. */
-	ret = mtk_spi_transfer_wait(mem, op);
-	if (ret)
-		goto unmap_rx_dma;
-
-	/* spi disable dma */
-	reg_val = readl(mdata->base + SPI_CMD_REG);
-	reg_val &= ~SPI_CMD_TX_DMA;
-	if (op->data.dir == SPI_MEM_DATA_IN)
-		reg_val &= ~SPI_CMD_RX_DMA;
-	writel(reg_val, mdata->base + SPI_CMD_REG);
-
-unmap_rx_dma:
-	if (op->data.dir == SPI_MEM_DATA_IN) {
-		dma_unmap_single(mdata->dev, mdata->rx_dma,
-				 op->data.nbytes, DMA_FROM_DEVICE);
-		if (!IS_ALIGNED((size_t)op->data.buf.in, 4))
-			memcpy(op->data.buf.in, rx_tmp_buf, op->data.nbytes);
-	}
-kfree_rx_tmp_buf:
-	if (op->data.dir == SPI_MEM_DATA_IN &&
-	    !IS_ALIGNED((size_t)op->data.buf.in, 4))
-		kfree(rx_tmp_buf);
-unmap_tx_dma:
-	dma_unmap_single(mdata->dev, mdata->tx_dma,
-			 tx_size, DMA_TO_DEVICE);
-err_exit:
-	kfree(tx_tmp_buf);
-	mdata->use_spimem = false;
-
-	return ret;
-}
-
-static const struct spi_controller_mem_ops mtk_spi_mem_ops = {
-	.adjust_op_size = mtk_spi_mem_adjust_op_size,
-	.supports_op = mtk_spi_mem_supports_op,
-	.exec_op = mtk_spi_mem_exec_op,
-};
-
 static int mtk_spi_probe(struct platform_device *pdev)
 {
 	struct spi_master *master;
@@ -1102,8 +645,6 @@ static int mtk_spi_probe(struct platform
 	master->transfer_one = mtk_spi_transfer_one;
 	master->can_dma = mtk_spi_can_dma;
 	master->setup = mtk_spi_setup;
-	master->set_cs_timing = mtk_spi_set_hw_cs_timing;
-	master->use_gpio_descriptors = true;
 
 	of_id = of_match_node(mtk_spi_of_match, pdev->dev.of_node);
 	if (!of_id) {
@@ -1120,14 +661,6 @@ static int mtk_spi_probe(struct platform
 
 	if (mdata->dev_comp->must_tx)
 		master->flags = SPI_MASTER_MUST_TX;
-	if (mdata->dev_comp->ipm_design)
-		master->mode_bits |= SPI_LOOP;
-
-	if (mdata->dev_comp->ipm_design) {
-		mdata->dev = &pdev->dev;
-		master->mem_ops = &mtk_spi_mem_ops;
-		init_completion(&mdata->spimem_done);
-	}
 
 	if (mdata->dev_comp->need_pad_sel) {
 		mdata->pad_num = of_property_count_u32_elems(
@@ -1204,49 +737,29 @@ static int mtk_spi_probe(struct platform
 		goto err_put_master;
 	}
 
-	mdata->spi_hclk = devm_clk_get_optional(&pdev->dev, "hclk");
-	if (IS_ERR(mdata->spi_hclk)) {
-		ret = PTR_ERR(mdata->spi_hclk);
-		dev_err(&pdev->dev, "failed to get hclk: %d\n", ret);
-		goto err_put_master;
-	}
-
-	ret = clk_prepare_enable(mdata->spi_hclk);
-	if (ret < 0) {
-		dev_err(&pdev->dev, "failed to enable hclk (%d)\n", ret);
-		goto err_put_master;
-	}
-
 	ret = clk_prepare_enable(mdata->spi_clk);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "failed to enable spi_clk (%d)\n", ret);
-		goto err_disable_spi_hclk;
-	}
-
-	ret = clk_prepare_enable(mdata->sel_clk);
-	if (ret < 0) {
-		dev_err(&pdev->dev, "failed to enable sel_clk (%d)\n", ret);
-		goto err_disable_spi_clk;
+		goto err_put_master;
 	}
 
 	ret = clk_set_parent(mdata->sel_clk, mdata->parent_clk);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "failed to clk_set_parent (%d)\n", ret);
-		goto err_disable_spi_sel_clk;
-	}
-
-	mdata->spi_clk_hz = clk_get_rate(mdata->spi_clk);
-
-	if (mdata->dev_comp->no_need_unprepare) {
-		clk_disable(mdata->spi_clk);
-		clk_disable(mdata->spi_hclk);
-	} else {
 		clk_disable_unprepare(mdata->spi_clk);
-		clk_disable_unprepare(mdata->spi_hclk);
+		goto err_put_master;
 	}
 
+	clk_disable_unprepare(mdata->spi_clk);
+
 	pm_runtime_enable(&pdev->dev);
 
+	ret = devm_spi_register_master(&pdev->dev, master);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to register master (%d)\n", ret);
+		goto err_disable_runtime_pm;
+	}
+
 	if (mdata->dev_comp->need_pad_sel) {
 		if (mdata->pad_num != master->num_chipselect) {
 			dev_err(&pdev->dev,
@@ -1256,12 +769,25 @@ static int mtk_spi_probe(struct platform
 			goto err_disable_runtime_pm;
 		}
 
-		if (!master->cs_gpiods && master->num_chipselect > 1) {
+		if (!master->cs_gpios && master->num_chipselect > 1) {
 			dev_err(&pdev->dev,
 				"cs_gpios not specified and num_chipselect > 1\n");
 			ret = -EINVAL;
 			goto err_disable_runtime_pm;
 		}
+
+		if (master->cs_gpios) {
+			for (i = 0; i < master->num_chipselect; i++) {
+				ret = devm_gpio_request(&pdev->dev,
+							master->cs_gpios[i],
+							dev_name(&pdev->dev));
+				if (ret) {
+					dev_err(&pdev->dev,
+						"can't get CS GPIO %i\n", i);
+					goto err_disable_runtime_pm;
+				}
+			}
+		}
 	}
 
 	if (mdata->dev_comp->dma_ext)
@@ -1273,22 +799,10 @@ static int mtk_spi_probe(struct platform
 		dev_notice(&pdev->dev, "SPI dma_set_mask(%d) failed, ret:%d\n",
 			   addr_bits, ret);
 
-	ret = devm_spi_register_master(&pdev->dev, master);
-	if (ret) {
-		dev_err(&pdev->dev, "failed to register master (%d)\n", ret);
-		goto err_disable_runtime_pm;
-	}
-
 	return 0;
 
 err_disable_runtime_pm:
 	pm_runtime_disable(&pdev->dev);
-err_disable_spi_sel_clk:
-	clk_disable_unprepare(mdata->sel_clk);
-err_disable_spi_clk:
-	clk_disable_unprepare(mdata->spi_clk);
-err_disable_spi_hclk:
-	clk_disable_unprepare(mdata->spi_hclk);
 err_put_master:
 	spi_master_put(master);
 
@@ -1299,22 +813,11 @@ static int mtk_spi_remove(struct platfor
 {
 	struct spi_master *master = platform_get_drvdata(pdev);
 	struct mtk_spi *mdata = spi_master_get_devdata(master);
-	int ret;
 
-	ret = pm_runtime_resume_and_get(&pdev->dev);
-	if (ret < 0)
-		return ret;
+	pm_runtime_disable(&pdev->dev);
 
 	mtk_spi_reset(mdata);
 
-	if (mdata->dev_comp->no_need_unprepare) {
-		clk_unprepare(mdata->spi_clk);
-		clk_unprepare(mdata->spi_hclk);
-	}
-
-	pm_runtime_put_noidle(&pdev->dev);
-	pm_runtime_disable(&pdev->dev);
-
 	return 0;
 }
 
@@ -1329,10 +832,8 @@ static int mtk_spi_suspend(struct device
 	if (ret)
 		return ret;
 
-	if (!pm_runtime_suspended(dev)) {
+	if (!pm_runtime_suspended(dev))
 		clk_disable_unprepare(mdata->spi_clk);
-		clk_disable_unprepare(mdata->spi_hclk);
-	}
 
 	return ret;
 }
@@ -1349,20 +850,11 @@ static int mtk_spi_resume(struct device
 			dev_err(dev, "failed to enable spi_clk (%d)\n", ret);
 			return ret;
 		}
-
-		ret = clk_prepare_enable(mdata->spi_hclk);
-		if (ret < 0) {
-			dev_err(dev, "failed to enable spi_hclk (%d)\n", ret);
-			clk_disable_unprepare(mdata->spi_clk);
-			return ret;
-		}
 	}
 
 	ret = spi_master_resume(master);
-	if (ret < 0) {
+	if (ret < 0)
 		clk_disable_unprepare(mdata->spi_clk);
-		clk_disable_unprepare(mdata->spi_hclk);
-	}
 
 	return ret;
 }
@@ -1374,13 +866,7 @@ static int mtk_spi_runtime_suspend(struc
 	struct spi_master *master = dev_get_drvdata(dev);
 	struct mtk_spi *mdata = spi_master_get_devdata(master);
 
-	if (mdata->dev_comp->no_need_unprepare) {
-		clk_disable(mdata->spi_clk);
-		clk_disable(mdata->spi_hclk);
-	} else {
-		clk_disable_unprepare(mdata->spi_clk);
-		clk_disable_unprepare(mdata->spi_hclk);
-	}
+	clk_disable_unprepare(mdata->spi_clk);
 
 	return 0;
 }
@@ -1391,31 +877,10 @@ static int mtk_spi_runtime_resume(struct
 	struct mtk_spi *mdata = spi_master_get_devdata(master);
 	int ret;
 
-	if (mdata->dev_comp->no_need_unprepare) {
-		ret = clk_enable(mdata->spi_clk);
-		if (ret < 0) {
-			dev_err(dev, "failed to enable spi_clk (%d)\n", ret);
-			return ret;
-		}
-		ret = clk_enable(mdata->spi_hclk);
-		if (ret < 0) {
-			dev_err(dev, "failed to enable spi_hclk (%d)\n", ret);
-			clk_disable(mdata->spi_clk);
-			return ret;
-		}
-	} else {
-		ret = clk_prepare_enable(mdata->spi_clk);
-		if (ret < 0) {
-			dev_err(dev, "failed to prepare_enable spi_clk (%d)\n", ret);
-			return ret;
-		}
-
-		ret = clk_prepare_enable(mdata->spi_hclk);
-		if (ret < 0) {
-			dev_err(dev, "failed to prepare_enable spi_hclk (%d)\n", ret);
-			clk_disable_unprepare(mdata->spi_clk);
-			return ret;
-		}
+	ret = clk_prepare_enable(mdata->spi_clk);
+	if (ret < 0) {
+		dev_err(dev, "failed to enable spi_clk (%d)\n", ret);
+		return ret;
 	}
 
 	return 0;
Index: linux-5.15.86/drivers/spi/spidev.c
===================================================================
--- linux-5.15.86.orig/drivers/spi/spidev.c
+++ linux-5.15.86/drivers/spi/spidev.c
@@ -693,6 +693,7 @@ static const struct spi_device_id spidev
 	{ .name = "m53cpld" },
 	{ .name = "spi-petra" },
 	{ .name = "spi-authenta" },
+	{ .name = "slic" },
 	{},
 };
 MODULE_DEVICE_TABLE(spi, spidev_spi_ids);
